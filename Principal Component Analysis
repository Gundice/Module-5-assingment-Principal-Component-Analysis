from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import numpy as np
import pandas as pd

# Load the breast cancer dataset
breast_cancer_data = load_breast_cancer()

# Convert the data to a DataFrame
df = pd.DataFrame(data=breast_cancer_data.data, columns=breast_cancer_data.feature_names)

# Display the first five rows to ensure importation was succesful
print(df.head(5))
print('Data set Imported Succesfully üëç')

# Set display options to show all columns
pd.set_option('display.max_columns', None)

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(breast_cancer_data.data)

# Apply PCA
pca = PCA()
X_pca = pca.fit_transform(X_scaled)

# Interpret the principal components and identify important variables
N = 5  # Number of top features to print

print("Principal component loadings (Top", N, "features):")
for i, component in enumerate(np.abs(pca.components_)):
    print(f"Component {i+1}:")
    # Sort the features by their loadings in descending order
    sorted_indices = np.argsort(component)[::-1]
    # Print the top N features with their names
    for j in range(N):
        feature_index = sorted_indices[j]
        feature_name = breast_cancer_data.feature_names[feature_index]
        print(f"{j+1}. {feature_name}: {component[feature_index]}")

# Rank the components based on their explained variance ratio
explained_variance_ratio = pca.explained_variance_ratio_
component_ranking = np.argsort(explained_variance_ratio)[::-1]
print("\nComponent Ranking (Based on Explained Variance Ratio):")
for rank, component_index in enumerate(component_ranking):
    print(f"Rank {rank+1}: Component {component_index+1} - Explained Variance Ratio: {explained_variance_ratio[component_index]}")

# Reduce the dataset to just two components (Component 1 and Component 2)
pca_2_components = PCA(n_components=2)
X_pca_2 = pca_2_components.fit_transform(X_scaled)

# Create a DataFrame with the reduced dataset
df_pca_2 = pd.DataFrame(data=X_pca_2, columns=['Component 1', 'Component 2'])

# Display the top 5 rows of the reduced dataset for confirmation
print("\nTop 5 Rows of the Reduced Dataset:")
print(df_pca_2.head(5))

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pca_2, breast_cancer_data.target, test_size=0.2, random_state=42)

# Train the logistic regression model
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

# Evaluate the model
train_accuracy = log_reg.score(X_train, y_train)
test_accuracy = log_reg.score(X_test, y_test)

print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)
